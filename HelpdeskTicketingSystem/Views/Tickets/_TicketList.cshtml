@model IEnumerable<HelpdeskTicketingSystem.DTOs.TicketDTO>
@using HelpdeskTicketingSystem.Enums

<div class="table-responsive">
    <table class="table table-hover">
        <thead class="table-light">
            <tr>
                <th scope="col">ID</th>
                <th scope="col">Title</th>
                <th scope="col">Department</th>
                <th scope="col">Status</th>
                <th scope="col">Severity</th>
                <th scope="col">Created</th>
                <th scope="col">Assigned To</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (Model != null && Model.Any())
            {
                foreach (var ticket in Model)
                {
                    <tr>
                        <td>@ticket.Id</td>
                        <td>
                            <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id" class="text-decoration-none">
                                @ticket.Title
                            </a>
                        </td>
                        <td>@ticket.DepartmentName</td>
                        <td>
                            <partial name="Components/_StatusIndicator" model="@ticket.Status" />
                        </td>
                        <td>
                            <span class="badge @(GetSeverityBadgeClass(ticket.Severity))">
                                @ticket.Severity
                            </span>
                        </td>
                        <td>@ticket.CreatedAt.ToString("MMM dd, yyyy")</td>
                        <td>@(string.IsNullOrEmpty(ticket.AssignedToName) ? "Unassigned" : ticket.AssignedToName)</td>
                        <td>
                            <div class="btn-group">
                                <a asp-controller="Tickets" asp-action="Details" asp-route-id="@ticket.Id"
                                   class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-eye"></i>
                                </a>
                                @if (User.IsInRole("Admin") || User.IsInRole("Supervisor") ||
                               (User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value == ticket.CreatedById.ToString()))
                                {
                                    <a asp-controller="Tickets" asp-action="Edit" asp-route-id="@ticket.Id"
                                       class="btn btn-sm btn-outline-secondary">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                }
                            </div>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="8" class="text-center py-4">
                        <p class="mb-0 text-muted">No tickets found</p>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@functions {
    private string GetSeverityBadgeClass(string severity)
    {
        return severity switch
        {
            "Low" => "bg-success",
            "Medium" => "bg-warning text-dark",
            "High" => "bg-danger",
            "Critical" => "bg-dark",
            _ => "bg-secondary"
        };
    }
}
